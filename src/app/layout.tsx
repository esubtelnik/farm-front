import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { fetchApi } from "@/lib/fetchApi";
import { getAccountApi } from "@/api/userApi";
// import MainLayout from "@/components/layouts/MainLayout";
import { AuthContextProvider } from "@/context/AuthProvider";
import { cookies } from "next/headers";
import { ProductContextProvider } from "@/context/ProductContext";
//import { getCookie } from "cookies-next/server";

const geistSans = Geist({
   variable: "--font-geist-sans",
   subsets: ["latin"],
});

const geistMono = Geist_Mono({
   variable: "--font-geist-mono",
   subsets: ["latin"],
});

export const metadata: Metadata = {
   title: "Create Next App",
   description: "Generated by create next app",
};

export default async function RootLayout({
   children,
}: Readonly<{
   children: React.ReactNode;
}>) {
   const token = (await cookies()).get("token")?.value;
   console.log("token", token);
   let userType = "guest";

   if (token) {
      console.log("token", token);
      try {
         const res = await fetchApi(getAccountApi(token));
         if (res.success) {
            console.log("Аккаунт:", res.data);
            userType = res.data.account_type.toString();
         } else {
            userType = "guest";
            console.error("Ошибка:", res.message);
         }
      } catch (e) {
         console.error("Ошибка получения аккаунта:", e);
      }
   }

   return (
      <html lang="en">
         <body
            className={`${geistSans.variable} ${geistMono.variable} antialiased `}
         >
            
            <AuthContextProvider
               initialUserType={userType}
            >
               <ProductContextProvider>
                  {children}
               </ProductContextProvider>
            </AuthContextProvider>
         </body>
      </html>
   );
}
